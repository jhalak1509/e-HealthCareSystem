/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import model.Patient;
import model.PatientDirectory;
import static model.PatientDirectory.patientDirectory;

/**
 *
 * @author jhalaksurve
 */
public class ManagePatients extends javax.swing.JPanel {

    int flag = 0;
    /**
     * Creates new form ManagePatients1
     */
    
    PatientDirectory pd ;//= new PatientDirectory();
    
            
    public ManagePatients() {
        initComponents();
        
        
        
        populateTable();
    }
    
    static boolean isValid(String email) {
      String regex = "^(.+)@(.+)$";
     
      return email.matches(regex);
   }
    //patientDirectory.addNewPatient( "Shubhi Miradwal",1,"shubhi123",23,'F',"shubhimiradwal2304@gmail.com","Boston","O+");

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAdd = new javax.swing.JButton();
        txtPatientEmail = new javax.swing.JTextField();
        txtPatientCity = new javax.swing.JTextField();
        txtSearch = new javax.swing.JTextField();
        lblPatientEmail = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        lblPatientCity = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        cbPatientGender = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        lblBloodGroup = new javax.swing.JLabel();
        txtPatientName = new javax.swing.JTextField();
        lblPatientName = new javax.swing.JLabel();
        txtPatientAge = new javax.swing.JTextField();
        txtBloodGroup = new javax.swing.JTextField();
        lblPatientAge = new javax.swing.JLabel();
        lblPatientGender = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();

        setBackground(new java.awt.Color(153, 204, 255));

        btnAdd.setBackground(new java.awt.Color(0, 153, 255));
        btnAdd.setFont(new java.awt.Font("Adelle Sans Devanagari", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        txtPatientEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientEmailActionPerformed(evt);
            }
        });

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        lblPatientEmail.setFont(new java.awt.Font("Adelle Sans Devanagari", 0, 14)); // NOI18N
        lblPatientEmail.setText("Patient Email");

        btnSearch.setBackground(new java.awt.Color(0, 153, 255));
        btnSearch.setFont(new java.awt.Font("Adelle Sans Devanagari", 1, 14)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(255, 255, 255));
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblPatientCity.setFont(new java.awt.Font("Adelle Sans Devanagari", 0, 14)); // NOI18N
        lblPatientCity.setText("Patient City");

        lblPassword.setFont(new java.awt.Font("Adelle Sans Devanagari", 0, 14)); // NOI18N
        lblPassword.setText("Patient Password");

        btnUpdate.setBackground(new java.awt.Color(0, 153, 255));
        btnUpdate.setFont(new java.awt.Font("Adelle Sans Devanagari", 1, 14)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(0, 153, 255));
        btnDelete.setFont(new java.awt.Font("Adelle Sans Devanagari", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        cbPatientGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "F", "M" }));
        cbPatientGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbPatientGenderActionPerformed(evt);
            }
        });

        tblPatient.setFont(new java.awt.Font("Adelle Sans Devanagari", 0, 12)); // NOI18N
        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient Name", "Patient Id", "Patient Age", "Patient Gender", "Blood Group", "Patient Email", "Patient City"
            }
        ));
        tblPatient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblPatientMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblPatient);

        lblBloodGroup.setFont(new java.awt.Font("Adelle Sans Devanagari", 0, 14)); // NOI18N
        lblBloodGroup.setText("Blood Group");

        lblPatientName.setFont(new java.awt.Font("Adelle Sans Devanagari", 0, 14)); // NOI18N
        lblPatientName.setText("Patient Name");

        txtPatientAge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPatientAgeKeyPressed(evt);
            }
        });

        lblPatientAge.setFont(new java.awt.Font("Adelle Sans Devanagari", 0, 14)); // NOI18N
        lblPatientAge.setText("Patient Age");

        lblPatientGender.setFont(new java.awt.Font("Adelle Sans Devanagari", 0, 14)); // NOI18N
        lblPatientGender.setText("Patient Gender ");

        txtPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblPassword)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(lblPatientName)
                                        .addGap(98, 98, 98)
                                        .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(112, 112, 112))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnUpdate)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnDelete)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnAdd))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblPatientCity)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtPatientCity, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(lblPatientEmail)
                                            .addGap(100, 100, 100)
                                            .addComponent(txtPatientEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPatientGender, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblPatientAge)
                                    .addComponent(lblBloodGroup))
                                .addGap(89, 89, 89)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbPatientGender, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtPatientAge, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBloodGroup, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSearch)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientName)
                    .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPatientGender)
                    .addComponent(cbPatientGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPassword)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPatientAge)
                    .addComponent(txtPatientAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPatientEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBloodGroup)
                            .addComponent(txtBloodGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(lblPatientEmail)))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPatientCity)
                    .addComponent(txtPatientCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(btnAdd)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtPatientEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientEmailActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchActionPerformed

    private void cbPatientGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbPatientGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbPatientGenderActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        
        //int patientId = Integer.parseInt(txtPatientId.getText());
        String patientName = txtPatientName.getText();
        String patientPassword = txtPassword.getText();
        char patientGender = cbPatientGender.getSelectedItem().toString().charAt(0);
        String patientEmail = txtPatientEmail.getText();
        int patientAge = Integer.parseInt(txtPatientAge.getText());
        String patientCity = txtPatientCity.getText();
        String bloodGroup = txtBloodGroup.getText();
       
        if(txtPatientName.getText().isEmpty() || txtPassword.getText().isEmpty() || txtPatientEmail.getText().isEmpty() || txtPatientAge.getText().isEmpty() || txtPatientCity.getText().isEmpty() || txtBloodGroup.getText().isEmpty())
            JOptionPane.showMessageDialog(this,"Please enter all the details!!");
        else{ 
            if(isValid(patientEmail)){
                for(Patient p : patientDirectory){
                if(p.getPatientEmail().equals(patientEmail)){
                    flag = 1;
                }
              }
                
          if(flag == 1)
              JOptionPane.showMessageDialog(this,"Email already registered!!");
          else{
        patientDirectory.add(new Patient(patientName,patientPassword, patientAge, patientGender, patientEmail, patientCity, bloodGroup));
        
        JOptionPane.showMessageDialog(this,"New Patient added");
        populateTable();
        //txtPatientId.setText("");
        txtPatientName.setText("");
        txtPassword.setText("");
        txtPatientEmail.setText("");
        txtPatientAge.setText("");
        txtPatientCity.setText("");
        txtBloodGroup.setText("");
          }
        }else
            JOptionPane.showMessageDialog(this,"Please enter valid email");
        }
        
    }//GEN-LAST:event_btnAddActionPerformed

    private void tblPatientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblPatientMouseClicked
        // TODO add your handling code here:
        int selectedRowIndex = tblPatient.getSelectedRow();
        if (selectedRowIndex<0){
        JOptionPane.showMessageDialog(this, "Select the row you want to DELETE");
        return;
        }
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        Patient selectedPatient;  
         selectedPatient= (Patient) model.getValueAt(selectedRowIndex, 0);
         txtPatientName.setText(selectedPatient.getPatientName());
         //txtPatientId.setText(String.valueOf(selectedPatient.getPatientId()));
         txtPassword.setText(selectedPatient.getPatientPassword());
         cbPatientGender.setSelectedItem(selectedPatient.getPatientGender());
         txtPatientEmail.setText(selectedPatient.getPatientEmail());
         txtPatientAge.setText(String.valueOf(selectedPatient.getPatientAge()));
         txtPatientCity.setText(selectedPatient.getPatientCity());
         txtBloodGroup.setText(selectedPatient.getBloodGroup());

    }//GEN-LAST:event_tblPatientMouseClicked

    private void txtPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPasswordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPasswordActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        DefaultTableModel tm;
        tm = (DefaultTableModel)tblPatient.getModel();
        if(tblPatient.getSelectedRowCount()==1){
           
     String name= txtPatientName.getText();
     //int id = Integer.parseInt(txtPatientId.getText());
     int age = Integer.parseInt(txtPatientAge.getText());
     char gender = cbPatientGender.getSelectedItem().toString().charAt(0);
     String password = txtPassword.getText();
     String email = txtPatientEmail.getText();
     String city = txtPatientCity.getText();
     String bloodGroup = txtBloodGroup.getText();
     
     if(txtPatientName.getText().isEmpty() || txtPassword.getText().isEmpty() || txtPatientEmail.getText().isEmpty() || txtPatientAge.getText().isEmpty() || txtPatientCity.getText().isEmpty() || txtBloodGroup.getText().isEmpty())
            JOptionPane.showMessageDialog(this,"Please enter all the details!!");
        else{ 
            if(isValid(email)){
                for(Patient p : patientDirectory){
                if(p.getPatientEmail().equals(email)){
                    flag = 1;
                }
              }
                
          if(flag == 1)
              JOptionPane.showMessageDialog(this,"Email already registered!!");
          else{
     
     tm.setValueAt(name, tblPatient.getSelectedRow(),0);
     //tm.setValueAt(id, tblPatient.getSelectedRow(),1);
     tm.setValueAt(age, tblPatient.getSelectedRow(),2);
     tm.setValueAt(gender, tblPatient.getSelectedRow(),3);
     tm.setValueAt(bloodGroup, tblPatient.getSelectedRow(),4);
     tm.setValueAt(email, tblPatient.getSelectedRow(),5);
     tm.setValueAt(city, tblPatient.getSelectedRow(),6);
     
     JOptionPane.showMessageDialog(this, "Updated Successfully");
      }
        }else
            JOptionPane.showMessageDialog(this,"Please enter valid email");
        }
     //populateTable();
        }
        else{
            if(tblPatient.getRowCount() == 0){
                JOptionPane.showMessageDialog(this, "Table is empty!!");
            }
            else{
                JOptionPane.showMessageDialog(this, "Please select a single row.");
            }
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
             int selectedRowIndex = tblPatient.getSelectedRow();
        
        if (selectedRowIndex < 0){
        
            JOptionPane.showMessageDialog(this, "Please select a row to delete.");
            return;
        }
        
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        Patient selectedPatient = (Patient)model.getValueAt(selectedRowIndex, 0);
        pd.deletePatient(selectedPatient);
        
      //  txtPatientId.setText("");
        txtPatientName.setText("");
        txtPassword.setText("");
        txtPatientEmail.setText("");
        txtPatientAge.setText("");
        txtPatientCity.setText("");
        txtBloodGroup.setText("");
        
        JOptionPane.showMessageDialog(this, "Doctor Deleted.");
        
        populateTable();
    }//GEN-LAST:event_btnDeleteActionPerformed

    //for searching through table
    private void filter(String query){
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        TableRowSorter<DefaultTableModel> tr = new TableRowSorter<DefaultTableModel>(model);
        tblPatient.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter(query));
    }
    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        // TODO add your handling code here:
        String query = txtSearch.getText();
        filter(query);
    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtPatientAgeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPatientAgeKeyPressed
        // TODO add your handling code here:
        char ch = evt.getKeyChar();
        if(Character.isLetter(ch)){
            txtPatientAge.setEditable(false);
            JOptionPane.showMessageDialog(this, "Please enter number only");
        }
        else
            txtPatientAge.setEditable(true);
    }//GEN-LAST:event_txtPatientAgeKeyPressed
    
    private void populateTable(){
        
        
        DefaultTableModel model = (DefaultTableModel) tblPatient.getModel();
        model.setRowCount(0);
        
        for(Patient p : patientDirectory){
        
            Object[] row = new Object[10];
            
            row[0] = p;
            row[1] = p.getPatientId();
            row[2] = p.getPatientAge();
            row[3] = p.getGender();
            row[4] = p.getBloodGroup();
            row[5] = p.getPatientEmail();
            row[6] = p.getPatientCity();
            
            model.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cbPatientGender;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBloodGroup;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPatientAge;
    private javax.swing.JLabel lblPatientCity;
    private javax.swing.JLabel lblPatientEmail;
    private javax.swing.JLabel lblPatientGender;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JTable tblPatient;
    private javax.swing.JTextField txtBloodGroup;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtPatientAge;
    private javax.swing.JTextField txtPatientCity;
    private javax.swing.JTextField txtPatientEmail;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
